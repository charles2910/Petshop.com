const nano = require('nano')('http://admin:admin@localhost:5984');
const fs = require('fs')

class Banner{
    constructor(){
        this.cachorros=[];
        this.gatos=[];
        this.roedores=[];
        this.passaros=[];
        this.peixes=[];
        this.brinquedos=[];
        this.saude=[];
        this.alimentos=[];
        this.higiene=[];
        this.acessorios=[];
        this.geral1=[];
        this.geral2=[];
        this.geral3=[];
    }
}

class Agendamento{
    constructor(data){
        this.data = data;
        this.horarios= ["8:00","9:00","10:00","11:00","12:00",
                        "13:00","14:00","15:00","16:00","17:00"]
    }
    ocupaHorario(horario){
        this.horarios.splice(this.horarios.indexOf(horario),1);
    }
}

const view ={
  "_id": "_design/view",
  "views": {
    "view": {
      "map": "function (doc) {\n  emit([1, doc.promocao], doc);\n  emit([2,doc.departamento], doc);\n  emit([3,doc.categoria], doc);\n}"
    }
  },
  "language": "javascript"
}

class Lista{
    constructor(nome,tipo,filtro,banner,itens,qtdTotalPaginas,pag){
    this.qtdTotalPaginas = qtdTotalPaginas;
    this.tipo = tipo;
    this.filtro = filtro;
    this.nome = nome;
    this.banner = banner;
    this.itens = itens;
    this.bannerPos = 0;
    this.pag = pag;
    }
}

const banners = new Banner();

async function criarDb() {
  const db_list = await nano.db.list();
  if(db_list.indexOf("estoque")<0){
    await nano.db.create("estoque");
    const estoque = nano.use("estoque");
    await carregarBancoDeDados(estoque);
    await estoque.insert(view,function(err,data){});
  }
  if(db_list.indexOf("usuarios")<0){
    await nano.db.create("usuarios");
    const usuarios = nano.use("usuarios");
    await usuarios.insert({
        nome: "admin",
        email: "admin@admin.com",
        celular: "99999999999",
        telefone: "99999999999",
        nascimento: "2000-01-01",
        cpf: "99999999999",
        senha: "admin",
        endereco: "",
        cartao: "",
        admin: true
    },"admin@admin.com");
    await usuarios.insert({
        nome: "user",
        email: "user@user.com",
        celular: "99999999999",
        telefone: "99999999999",
        nascimento: "2000-01-01",
        cpf: "99999999999",
        senha: "user",
        endereco: "",
        cartao: "",
        admin: false
    },"user@user.com");
  }
  if(db_list.indexOf("servicos")<0) await nano.db.create("servicos");
  if(db_list.indexOf("agenda")<0) await nano.db.create("agenda");
  await carregarBanners();
}

async function destruirDb(){
    const db_list = await nano.db.list();
    if(db_list.indexOf("estoque")>0) await nano.db.destroy("estoque");
    if(db_list.indexOf("usuarios")>0) await nano.db.destroy("usuarios");
    if(db_list.indexOf("servicos")>0) await nano.db.destroy("servicos");
    if(db_list.indexOf("agenda")>0) await nano.db.destroy("agenda");
}

async function carregarBancoDeDados(estoque){
    return new Promise(async(resolve)=>{
        let departamento = ["acessórios","alimentos","brinquedos","higiene","saúde"]
        for(let i = 0; i<5;i++){
            let jsonData = fs.readFileSync("produtos/"+departamento[i]+".json");
            let temp = JSON.parse(jsonData);
            for(let j=0; j<temp.length;j++){
                await estoque.insert(temp[j],temp[j].codigo).catch();
            }
        }
        resolve(true);
    });
}

async function addUser(user){
    const usuarios = nano.use("usuarios");
    let retorno;
    await usuarios.get(user.email).then((headers)=>{
        retorno = false
    }).catch(async ()=>{
        await usuarios.insert(user,user.email);
        retorno = true
    });
    return retorno;
}

async function updateUser(user){
    const usuarios = nano.use("usuarios");
    let retorno;
    await usuarios.get(user.email).then(async (headers)=>{
        await usuarios.destroy(user.email,headers._rev);
        await usuarios.insert(user,user.email);
        retorno = true
    }).catch(async ()=>{
        retorno = false;
    });
    return retorno;
}

async function findUser(email){
    return new Promise((resolve)=>{
        const usuarios = nano.use("usuarios");
        usuarios.get(email).then((headers)=>{
            resolve(headers);
        }).catch(()=>{
            resolve(false);
        });
    })
}

async function addProduto(produto){
    const produtos = nano.use("estoque");
    let retorno;
    await produtos.get(produto.codigo).then((headers)=>{
        retorno =  false
    }).catch(async ()=>{
        await produtos.insert(produto,produto.codigo);
        retorno = true
    });
    await carregarBanners();
    return retorno;
}

async function updateProduto(produto){
    const estoque = nano.use("estoque");
    let retorno;
    await estoque.get(produto.codigo).then(async (headers)=>{
        console.log("teste");
        await estoque.destroy(produto.codigo,headers._rev);
        await estoque.insert(produto,produto.codigo);
        retorno = true
    }).catch(async ()=>{
        console.log("produto não existe");
        retorno = false;
    });
    await carregarBanners();
    return retorno;
}

async function removeProduto(codigo){
    const produtos = nano.use("estoque");
    let retorno;
    await produtos.get(codigo).then(async(headers)=>{
        await produtos.destroy(codigo,headers._rev);
        console.log("produto removido");
        retorno =  true
    }).catch(async ()=>{
        console.log("produto não existe");
        retorno = false
    });
    await carregarBanners();
    return retorno;
}

async function findProduto(codigo){
    const produtos = nano.use("estoque");
    let produto;
    await produtos.get(codigo).then((headers)=>{
        console.log("achou o produto");
        produto = headers;
    }).catch(()=>{
        console.log("nao achou o produto");
        produto = false;
    });
    return produto;

}
// filtro 1 = departamento, 2 = categoria, 3 = busca
//nome é ou o departamento ou a categoria em especifico que se quer buscar
//inicio é qual pagina será carregada
async function findProdutos(inicio, filtro, nome){
    filtro++;
    if(filtro === 4){
        return buscaProduto(inicio,nome);
    }
    const estoque = nano.use("estoque");
    const produtos = [];
    let qtdTotalpaginas;
    body = await estoque.view('view', 'view', {
        'key': [filtro,nome]
    })
    if(body.rows.length%16 === 0){
        qtdTotalpaginas = body.rows.length/16;
    }else{
        qtdTotalpaginas = 1+((body.rows.length-(body.rows.length%16))/16);
    }
    for(let i=0;i<body.rows.length;i++){
        if(i>=(inicio*16) && produtos.length < 16){
            produtos.push(body.rows[i].value);
        }
        if(produtos.length >= 16){
            break;
        }
    }
    let tipo;
    if(filtro==1){
        tipo = "departamento";
    }else{
        tipo = "categoria";
    }
    filtro--;
    let nomeBanner = nome.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
    return new Lista(nome,tipo,filtro,banners[nomeBanner],produtos,qtdTotalpaginas,inicio);
}

async function buscaProduto(inicio,txt){
    if(txt!=undefined){
        inicio = parseInt(inicio);
        const estoque = nano.use("estoque");
        body1 = await estoque.view('view', 'view', {
            'key': [1,true]
        })
        body2 = await estoque.view('view', 'view', {
            'key': [1,false]
        })
        body1.rows.concat(body1);
        let retorno = [];
        let txtOriginal = txt;
        txt = txt.toLowerCase();
        txt = txt.split(" ");
        body1.rows.forEach((produto)=>{
            let add = false
            txt.forEach((palavra)=>{
                let txtProduto = produto.value.nomeCompleto.toLowerCase() + " "+
                                 (""+produto.value.preco).toLowerCase() +" "
                                 produto.value.descricao.toLowerCase();
                if(txtProduto.includes(palavra) && !retorno.includes(produto.value)){
                    add = true
                    return;
                }
            });
            if(add){
                retorno.push(produto.value);
                add= false;
            }
        });
        let qtdTotalPaginas;
        if(retorno.length%16 === 0){
            qtdTotalpaginas = retorno.length/16;
        }else{
            qtdTotalpaginas = 1+((retorno.length-(retorno.length%16))/16);
        }
        retorno = retorno.slice(inicio*16,(inicio+1)*16);
        return new Lista(txtOriginal,txtOriginal,3,banners["geral1"],retorno,qtdTotalpaginas,inicio);
    }
}

async function addAgendamento(agendamento){
    const agenda = nano.use("agenda");
    let retorno;
    await agenda.get(agendamento.data).then(async(headers)=>{
        await agenda.destroy(agendamento.data,headers._rev);
        await agenda.insert(agendamento,agendamento.data);
    }).catch(async()=>{
        await agenda.insert(agendamento,agendamento.data);
    });
    return retorno;
}

async function findAgendamento(data){
    const agenda = nano.use("agenda");
    let retorno;
    await agenda.get(data).then((headers)=>{
        retorno = headers
    }).catch(()=>{
        retorno = new Agendamento(data);
    });
    return retorno;
}

async function addServico(servico){
    const servicos = nano.use("servicos");
    let retorno;
    await servicos.get(servico.id).then((headers)=>{
        retorno = false
    }).catch(async ()=>{
        await servicos.insert(servico,servico.id);
        retorno = true
    });
    return retorno;
}

async function updateServico(servico){
    const servicos = nano.use("servicos");
    let retorno;
    console.log(servico._rev);
    await servicos.get(servico.id).then(async (headers)=>{
        console.log("achou")
        await servicos.destroy(servico.id,headers._rev);
        await servicos.insert(servico,servico.id);
        retorno = true
    }).catch(async ()=>{
        console.log("servico não existe");
        retorno = false;
    });
    return retorno;
}

async function findServico(id){
    return new Promise((resolve)=>{
        const servicos = nano.use("servicos");
        servicos.get(id).then((headers)=>{
            resolve(headers);
        }).catch(()=>{
            resolve(false);
        });
    })
}

async function getServicos(){
    const servicos = nano.use("servicos");
    let todosServicos = [];
    let body = await servicos.list();
    for(const id of body.rows){
        let servico = await servicos.get(id.id);
        todosServicos.push(servico);
    }
    return todosServicos;
}

async function carregarBanners(){
    return new Promise( async(resolve)=> {
        const estoque = nano.use("estoque");
        const promocoes = []
        body = await estoque.view('view', 'view', {
            'key': [1,true]
        })
        body.rows.forEach((doc) => {
            promocoes.push(doc.value);
        });
        promocoes.sort(compare);
        promocoes.forEach((produto)=>{
            const categoria = produto.categoria.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
            const departamento = produto.departamento.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
            if(banners[departamento].length < 12) banners[departamento].push(produto);
            if(banners[categoria].length < 12) banners[categoria].push(produto);
        });
        banners.geral1 = promocoes.slice(0,10);
        promocoes.sort(compare1);
        banners.geral2 = promocoes.slice(0,10);
        promocoes.sort(compare2);
        let i=0;
        while(banners.geral3.length < 10){
            if(promocoes[i].qtdEstoque !==0 && i<= promocoes.length){
                banners.geral3.push(promocoes[i]);
            }
            i++;
        }
        resolve(true);
    });
}

function getBanner(nome){
    nome = nome.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
    if(nome!== "geral"){
        return banners[nome];
    }else{
        return [banners.geral1,banners.geral2,banners.geral3];
    }
}

function compare(a,b){//Ordena pela % do precao
    return b.precoPromocional-a.precoPromocional;
}

function compare1(a,b){//ordena pelo desconto real
    return   ((b.preco) - (b.preco) *((100-b.precoPromocional)/100)) - (a.preco - (a.preco)*((100-a.precoPromocional)/100));
}

function compare2(a,b){//Ordena pela quantidade em estoque
    return a.qtdEstoque - b.qtdEstoque;
}

async function validaLogin(email, senha){
    let user = await findUser(email);
    if(user !== false){
        if(user.senha === senha){
            return user;
        }else{
            return false;
        }
    }else{
        return false;
    }
}

module.exports = {findServico,validaLogin,updateServico,carregarBanners,removeProduto,updateProduto,updateUser,criarDb,destruirDb,getBanner,addUser, findUser, addProduto, findProduto, findProdutos, buscaProduto, addAgendamento, findAgendamento, addServico, getServicos};
